.container_scanning:
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
  script:
    - trivy --version
    - trivy clean --scan-cache
    - time trivy image --download-db-only
    - mkdir -p .trivycache
    - time trivy image --input $TAR_IMAGE_NAME --exit-code 0 --format template --template "@/contrib/gitlab.tpl" --output "$FULL_IMAGE_NAME-scanning-report.json" "$FULL_IMAGE_NAME"
    - time trivy image --input $TAR_IMAGE_NAME --exit-code 0 "$FULL_IMAGE_NAME"
    - time trivy image --input $TAR_IMAGE_NAME --exit-code 1 --severity CRITICAL "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  artifacts:
    when: always
    reports:
      container_scanning: $FULL_IMAGE_NAME-scanning-report.json

stages:
  - notify
  - config
  - build
  - test
  - deploy

image: python:3.10

build-backend:
  stage: build
  script:
    - cd backend/
    - python -m venv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
  artifacts:
    paths:
      - backend/venv/
      - backend/src/
      - backend/requirements.txt

lint-backend:
  stage: build
  script:
    - cd backend/
    - pip install flake8
    - source venv/bin/activate
    - flake8 src/
  needs: 
    - build-backend

test-backend:
  stage: build
  services:
    - postgres
  variables:
    POSTGRES_HOST: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_DB: microservices_db 
    POSTGRES_HOST_AUTH_METHOD: trust    
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/microservices_db"
    FLASK_ENV: "testing"
  script:
    - cd backend/
    - pip install pytest
    - source venv/bin/activate
    - pytest src/
  needs: 
    - build-backend

image: node:18
build-frontend:
  stage: build
  script:
    - cd frontend/
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/build/
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/node_modules/
    policy: pull-push


lint-frontend:
  stage: build
  script:
    - cd frontend/
    - npm install --save-dev eslint eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y @typescript-eslint/parser @typescript-eslint/eslint-plugin
    - npm run lint
  needs: 
    - build-frontend

test-frontend:
  stage: build
  script:
    - cd frontend/
    - npm install --save-dev @testing-library/jest-dom @testing-library/user-event msw
    - npm test
  needs: 
    - build-frontend


docker-build-backend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd backend/
    - docker build -t backend:v1 .
    - cd ..
    - docker save backend:v1 -o backend-image.tar
  artifacts:
    paths:
      - backend-image.tar
  needs:
    - lint-backend
    - test-backend

trivy-backend:
  stage: test
  extends: .container_scanning
  variables:
    TAR_IMAGE_NAME: backend-image.tar
    FULL_IMAGE_NAME: backend:v1
  needs:
    - docker-build-backend