.container_scanning:
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    # No need to clone the repo, we exclusively work on artifacts.  See
    # https://docs.gitlab.com/ee/ci/runners/README.html#git-strategy
    GIT_STRATEGY: none
    TRIVY_USERNAME: "$CI_REGISTRY_USER"
    TRIVY_PASSWORD: "$CI_REGISTRY_PASSWORD"
    TRIVY_AUTH_URL: "$CI_REGISTRY"
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
    FULL_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  script:
    - trivy --version
    # cache cleanup is needed when scanning images with the same tags, it does not remove the database
    - time trivy image --clear-cache
    # update vulnerabilities db
    - time trivy image --download-db-only
    # Builds report and puts it in the default workdir $CI_PROJECT_DIR, so `artifacts:` can take it from there
    - time trivy image --exit-code 0 --format template --template "@/contrib/gitlab.tpl"
        --output "$CI_PROJECT_DIR/gl-container-scanning-report.json" "$FULL_IMAGE_NAME"
    # Prints full report
    - time trivy image --exit-code 0 "$FULL_IMAGE_NAME"
    # Fail on critical vulnerabilities
    - time trivy image --exit-code 1 --severity CRITICAL "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  # Enables https://docs.gitlab.com/ee/user/application_security/container_scanning/ (Container Scanning report is available on GitLab EE Ultimate or GitLab.com Gold)
  artifacts:
    when:                          always
    reports:
      container_scanning:          gl-container-scanning-report.json


stages:          # List of stages for jobs, and their order of execution
  - config
  - notify
  - build
  - test
  - docker
  - deploy


image: python:3.10
build-backend:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - cd backend/
    - python -m venv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
  artifacts:
    paths:
      - backend/venv/
      - backend/src/
      - backend/requirements.txt
  
lint-backend:
  stage: test
  script:
    - cd backend/
    - pip install flake8
    - source venv/bin/activate
    - flake8 src/
  needs: 
    - build-backend

test-backend:
  services:
      - postgres
  variables:
      POSTGRES_HOST: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: microservices_db 
      POSTGRES_HOST_AUTH_METHOD: trust    
      DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/microservices_db"
      FLASK_ENV: "testing"
  stage: test
  script:
    - cd backend/
    - pip install pytest
    - source venv/bin/activate
    - pytest src/
  needs: 
    - build-backend

docker-build-backend:
  stage: docker
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd backend/
    - docker build -t backend:v1 . 
    - docker save backend:v1 > backend:v1.tar
  artifacts:
    paths:
      - backend/backend:v1.tar
  needs:
    - lint-backend
    - test-backend

trivy-backend:
  script:
    - cd backend/
    - docker load < backend:v1.tar
    - docker images
  extends:
    .container_scanning
  variables:
    FULL_IMAGE_NAME: backend:v1

 



