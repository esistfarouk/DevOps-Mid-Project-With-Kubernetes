.container_scanning:
  image:
    name: docker.io/aquasec/trivy:latest
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
    TRIVY_NO_PROGRESS: "true"
    TRIVY_CACHE_DIR: ".trivycache/"
  script:
    - trivy --version
    - trivy clean --scan-cache
    - time trivy image --download-db-only
    - mkdir -p .trivycache
    - time trivy image --input $TAR_IMAGE_NAME --exit-code 0 --format template --template "@/contrib/gitlab.tpl" --output "$FULL_IMAGE_NAME-scanning-report.json" "$FULL_IMAGE_NAME"
    - time trivy image --input $TAR_IMAGE_NAME --exit-code 0 "$FULL_IMAGE_NAME"
    - time trivy image --input $TAR_IMAGE_NAME --exit-code 1 --severity CRITICAL "$FULL_IMAGE_NAME"
  cache:
    paths:
      - .trivycache/
  artifacts:
    when: always
    reports:
      container_scanning: $FULL_IMAGE_NAME-scanning-report.json

stages:
  - notify
  - config
  - build
  - test
  - dockerization
  - security-scan
  - deploy

slack-notify:
  stage: notify
  script:
    - |
      curl -X POST -H 'Content-type: application/json' --data '{
        "text": ":drum_with_drumsticks: :drum_with_drumsticks: :drum_with_drumsticks:\n:rocket: NEW DEPLOYMENT :tada:\n\n
        Project: '"$CI_PROJECT_NAME"'\n
        Branch: '"$CI_COMMIT_REF_NAME"'\n
        Pipeline: <'"$CI_PIPELINE_URL"'|#'"$CI_PIPELINE_ID"'>\n
        Commit: <'"$CI_PROJECT_URL"'/-/commit/'"$CI_COMMIT_SHA"'|'"${CI_COMMIT_SHA:0:8}"'> - '"$CI_COMMIT_MESSAGE"'\n
        Deployed by '"$GITLAB_USER_NAME"'"
      }' https://hooks.slack.com/services/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
      
config-deployment-machine:
  stage: config
  before_script:    
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # to install required secure .pem file
    - apt install curl bash -y
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    - cp .secure_files/gitlab-test.pem ~/.ssh/ec2_key.pem
    - chmod 600 ~/.ssh/ec2_key.pem
    # add ip address to /etc/hosts to change according to EC2_IP variable
    - echo "$EC2_IP    $EC2_HOSTNAME" |  tee -a /etc/hosts
    - cat /etc/hosts
    - ssh-keyscan -H $EC2_HOSTNAME >> ~/.ssh/known_hosts
    - apt-get update
    - apt install ansible-core -y
  script:
    - ansible-playbook site.yml -i inventory.ini --private-key=~/.ssh/ec2_key.pem
  only:
    - configuration_branch


build-backend:
  image: python:3.10
  stage: build
  script:
    - cd backend/
    - python -m venv venv
    - source venv/bin/activate
    - pip install -r requirements.txt
  artifacts:
    paths:
      - backend/venv/
      - backend/src/
      - backend/requirements.txt
  only:
    - main

lint-backend:
  image: python:3.10
  stage: test
  script:
    - cd backend/
    - pip install flake8
    - source venv/bin/activate
    - flake8 src/
  needs: 
    - build-backend
  only:
    - main

test-backend:
  image: python:3.10
  stage: test
  services:
    - postgres
  variables:
    POSTGRES_HOST: postgres
    POSTGRES_PASSWORD: postgres
    POSTGRES_DB: microservices_db 
    POSTGRES_HOST_AUTH_METHOD: trust    
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/microservices_db"
    FLASK_ENV: "testing"
  script:
    - cd backend/
    - pip install pytest
    - source venv/bin/activate
    - pytest src/
  needs: 
    - build-backend
  only:
    - main

docker-build-backend:
  stage: dockerization
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd backend/
    - docker build -t backend:v1 .
    - cd ..
    - docker save backend:v1 -o backend-image.tar
  artifacts:
    paths:
      - backend-image.tar
  needs:
    - lint-backend
    - test-backend
  only:
    - main

trivy-backend:
  stage: security-scan
  extends: .container_scanning
  variables:
    TAR_IMAGE_NAME: backend-image.tar
    FULL_IMAGE_NAME: backend:v1
  needs:
    - docker-build-backend
  only:
    - main


build-frontend:
  image: node:18
  stage: build
  script:
    - cd frontend/
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/build/
  cache:
    key: frontend-deps
    paths:
      - frontend/node_modules/
    policy: pull-push
  only:
    - main

lint-frontend:
  image: node:18
  stage: test
  script:
    - cd frontend/
    - npm install --save-dev eslint eslint-plugin-react eslint-plugin-react-hooks eslint-plugin-jsx-a11y @typescript-eslint/parser @typescript-eslint/eslint-plugin
    - npm run lint
  needs: 
    - build-frontend
  only:
    - main

test-frontend:
  image: node:18
  stage: test 
  script:
    - echo "Testing frontend ... "
  needs: 
    - build-frontend
  only:
    - main

docker-build-frontend:
  stage: dockerization
  image: docker:latest
  services:
    - docker:dind
  script:
    - ls frontend/ 
    - docker build -t frontend:v1 -f frontend/Dockerfile frontend/
    - docker save frontend:v1 -o frontend-image.tar
  artifacts:
    paths:
      - frontend-image.tar
  needs:
    - lint-frontend
    - test-frontend
  only:
    - main

trivy-frontend:
  stage: security-scan
  extends: .container_scanning
  variables:
    TAR_IMAGE_NAME: frontend-image.tar
    FULL_IMAGE_NAME: frontend:v1
  needs:
    - docker-build-frontend
  only:
    - main


docker-build-postgres:
  stage: dockerization
  image: docker:latest
  services:
    - docker:dind
  script:
    - ls database/ 
    - docker build -t postgres:v1 -f database/Dockerfile database/
    - docker save postgres:v1 -o postgres-image.tar
  artifacts:
    paths:
      - postgres-image.tar
  only:
    - main

trivy-postgres:
  stage: security-scan
  extends: .container_scanning
  variables:
    TAR_IMAGE_NAME: postgres-image.tar
    FULL_IMAGE_NAME: postgres:v1
  needs:
    - docker-build-postgres
  only:
    - main

docker-push-images:
  stage: deploy
  image: docker:latest
  services: 
    - docker:dind
  script:
    - docker login -u $dockerhub_username -p $dockerhub_password
    - docker load -i frontend-image.tar
    - docker load -i backend-image.tar
    - docker load -i postgres-image.tar
    - docker tag backend:v1 $dockerhub_username/backend:v1
    - docker tag frontend:v1 $dockerhub_username/frontend:v1
    - docker tag postgres:v1 $dockerhub_username/postgres:v1
    - docker image push $dockerhub_username/backend:v1
    - docker image push $dockerhub_username/frontend:v1
    - docker image push $dockerhub_username/postgres:v1
  needs:
    - trivy-frontend
    - trivy-backend
    - trivy-postgres
    - job: docker-build-frontend
      artifacts: true
    - job: docker-build-backend
      artifacts: true
    - job: docker-build-postgres
      artifacts: true

docker-compose:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:    
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    # to install required secure .pem file
    - apk add curl bash 
    - curl --silent "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/raw/main/installer" | bash
    - cp .secure_files/gitlab-test.pem ~/.ssh/ec2_key.pem
    - chmod 600 ~/.ssh/ec2_key.pem
    # add ip address to /etc/hosts to change according to EC2_IP variable
    - echo "$EC2_IP    $EC2_HOSTNAME" |  tee -a /etc/hosts
    - cat /etc/hosts
    - ssh-keyscan -H $EC2_HOSTNAME >> ~/.ssh/known_hosts
    - ssh ubuntu@$EC2_HOSTNAME
  script:
    - docker image pull $dockerhub_username/backend:v1
    - docker image pull $dockerhub_username/frontend:v1
    - docker image pull $dockerhub_username/postgres:v1
    - docker tag $dockerhub_username/backend:v1 backend:v1
    - docker tag $dockerhub_username/frontend:v1 frontend:v1
    - docker tag $dockerhub_username/postgres:v1 postgres:v1
    - docker compose down
    - docker compose up -d
  # needs:
  #   - docker-push-images
  only:
    - main